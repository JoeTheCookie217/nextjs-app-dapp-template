/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as DutchAuctionContractJson } from "../DutchAuction.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace DutchAuctionTypes {
  export type Fields = {
    owner: Address;
    auctionStartTime: bigint;
    collectionId: HexString;
    baseTokenURI: HexString;
    nftIndex: bigint;
    allTokensLen: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    addTokenToAllTokensEnumeration: {
      params: CallContractParams<{ tokenId: bigint }>;
      result: CallContractResult<null>;
    };
    auctionMint: {
      params: CallContractParams<{ value: bigint; quantity: bigint }>;
      result: CallContractResult<null>;
    };
    getAuctionPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    setAuctionStartTime: {
      params: CallContractParams<{ timestamp: bigint }>;
      result: CallContractResult<null>;
    };
    baseURI: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    setBaseURI: {
      params: CallContractParams<{ baseURI: HexString }>;
      result: CallContractResult<null>;
    };
    withdrawMoney: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    mint: {
      params: CallContractParams<{ mintIndex: bigint }>;
      result: CallContractResult<HexString>;
    };
    onlyOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getTokenUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollectionIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    addTokenToAllTokensEnumeration: {
      params: SignExecuteContractMethodParams<{ tokenId: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    auctionMint: {
      params: SignExecuteContractMethodParams<{
        value: bigint;
        quantity: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getAuctionPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setAuctionStartTime: {
      params: SignExecuteContractMethodParams<{ timestamp: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    baseURI: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setBaseURI: {
      params: SignExecuteContractMethodParams<{ baseURI: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawMoney: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: SignExecuteContractMethodParams<{ mintIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    onlyOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  DutchAuctionInstance,
  DutchAuctionTypes.Fields
> {
  encodeFields(fields: DutchAuctionTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    ErrorCodes: {
      NotStarted: BigInt("0"),
      NotAuthorized: BigInt("1"),
      NotEnoughReserve: BigInt("2"),
      InvalidValue: BigInt("3"),
    },
  };

  at(address: string): DutchAuctionInstance {
    return new DutchAuctionInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params, getContractByCodeHash);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getCollectionIndex",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    addTokenToAllTokensEnumeration: async (
      params: TestContractParamsWithoutMaps<
        DutchAuctionTypes.Fields,
        { tokenId: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "addTokenToAllTokensEnumeration",
        params,
        getContractByCodeHash
      );
    },
    auctionMint: async (
      params: TestContractParamsWithoutMaps<
        DutchAuctionTypes.Fields,
        { value: bigint; quantity: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "auctionMint", params, getContractByCodeHash);
    },
    getAuctionPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAuctionPrice", params, getContractByCodeHash);
    },
    setAuctionStartTime: async (
      params: TestContractParamsWithoutMaps<
        DutchAuctionTypes.Fields,
        { timestamp: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "setAuctionStartTime",
        params,
        getContractByCodeHash
      );
    },
    baseURI: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "baseURI", params, getContractByCodeHash);
    },
    setBaseURI: async (
      params: TestContractParamsWithoutMaps<
        DutchAuctionTypes.Fields,
        { baseURI: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setBaseURI", params, getContractByCodeHash);
    },
    withdrawMoney: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawMoney", params, getContractByCodeHash);
    },
    mint: async (
      params: TestContractParamsWithoutMaps<
        DutchAuctionTypes.Fields,
        { mintIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
    onlyOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<DutchAuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "onlyOwner", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: DutchAuctionTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const DutchAuction = new Factory(
  Contract.fromJson(
    DutchAuctionContractJson,
    "=15-1+e=3-5+7=3-1+3=3-1+4=3-1+2=3-1+3=2-2+20=4+414e=76+000216007e02=499-1+d=18+16007e020000=50",
    "83abe276bfe1db722662986652a2489130438dc39fdcce79b87f88144313e029",
    []
  )
);
registerContract(DutchAuction);

// Use this class to interact with the blockchain
export class DutchAuctionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DutchAuctionTypes.State> {
    return fetchContractState(DutchAuction, this);
  }

  view = {
    getTokenUri: async (
      params?: DutchAuctionTypes.CallMethodParams<"getTokenUri">
    ): Promise<DutchAuctionTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        DutchAuction,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: DutchAuctionTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<DutchAuctionTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        DutchAuction,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: DutchAuctionTypes.CallMethodParams<"totalSupply">
    ): Promise<DutchAuctionTypes.CallMethodResult<"totalSupply">> => {
      return callMethod(
        DutchAuction,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    addTokenToAllTokensEnumeration: async (
      params: DutchAuctionTypes.CallMethodParams<"addTokenToAllTokensEnumeration">
    ): Promise<
      DutchAuctionTypes.CallMethodResult<"addTokenToAllTokensEnumeration">
    > => {
      return callMethod(
        DutchAuction,
        this,
        "addTokenToAllTokensEnumeration",
        params,
        getContractByCodeHash
      );
    },
    auctionMint: async (
      params: DutchAuctionTypes.CallMethodParams<"auctionMint">
    ): Promise<DutchAuctionTypes.CallMethodResult<"auctionMint">> => {
      return callMethod(
        DutchAuction,
        this,
        "auctionMint",
        params,
        getContractByCodeHash
      );
    },
    getAuctionPrice: async (
      params?: DutchAuctionTypes.CallMethodParams<"getAuctionPrice">
    ): Promise<DutchAuctionTypes.CallMethodResult<"getAuctionPrice">> => {
      return callMethod(
        DutchAuction,
        this,
        "getAuctionPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setAuctionStartTime: async (
      params: DutchAuctionTypes.CallMethodParams<"setAuctionStartTime">
    ): Promise<DutchAuctionTypes.CallMethodResult<"setAuctionStartTime">> => {
      return callMethod(
        DutchAuction,
        this,
        "setAuctionStartTime",
        params,
        getContractByCodeHash
      );
    },
    baseURI: async (
      params?: DutchAuctionTypes.CallMethodParams<"baseURI">
    ): Promise<DutchAuctionTypes.CallMethodResult<"baseURI">> => {
      return callMethod(
        DutchAuction,
        this,
        "baseURI",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setBaseURI: async (
      params: DutchAuctionTypes.CallMethodParams<"setBaseURI">
    ): Promise<DutchAuctionTypes.CallMethodResult<"setBaseURI">> => {
      return callMethod(
        DutchAuction,
        this,
        "setBaseURI",
        params,
        getContractByCodeHash
      );
    },
    withdrawMoney: async (
      params?: DutchAuctionTypes.CallMethodParams<"withdrawMoney">
    ): Promise<DutchAuctionTypes.CallMethodResult<"withdrawMoney">> => {
      return callMethod(
        DutchAuction,
        this,
        "withdrawMoney",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    mint: async (
      params: DutchAuctionTypes.CallMethodParams<"mint">
    ): Promise<DutchAuctionTypes.CallMethodResult<"mint">> => {
      return callMethod(
        DutchAuction,
        this,
        "mint",
        params,
        getContractByCodeHash
      );
    },
    onlyOwner: async (
      params?: DutchAuctionTypes.CallMethodParams<"onlyOwner">
    ): Promise<DutchAuctionTypes.CallMethodResult<"onlyOwner">> => {
      return callMethod(
        DutchAuction,
        this,
        "onlyOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getTokenUri: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"getTokenUri">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"getTokenUri">> => {
      return signExecuteMethod(DutchAuction, this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"getCollectionIndex">
    ): Promise<
      DutchAuctionTypes.SignExecuteMethodResult<"getCollectionIndex">
    > => {
      return signExecuteMethod(
        DutchAuction,
        this,
        "getCollectionIndex",
        params
      );
    },
    totalSupply: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"totalSupply">> => {
      return signExecuteMethod(DutchAuction, this, "totalSupply", params);
    },
    addTokenToAllTokensEnumeration: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"addTokenToAllTokensEnumeration">
    ): Promise<
      DutchAuctionTypes.SignExecuteMethodResult<"addTokenToAllTokensEnumeration">
    > => {
      return signExecuteMethod(
        DutchAuction,
        this,
        "addTokenToAllTokensEnumeration",
        params
      );
    },
    auctionMint: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"auctionMint">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"auctionMint">> => {
      return signExecuteMethod(DutchAuction, this, "auctionMint", params);
    },
    getAuctionPrice: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"getAuctionPrice">
    ): Promise<
      DutchAuctionTypes.SignExecuteMethodResult<"getAuctionPrice">
    > => {
      return signExecuteMethod(DutchAuction, this, "getAuctionPrice", params);
    },
    setAuctionStartTime: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"setAuctionStartTime">
    ): Promise<
      DutchAuctionTypes.SignExecuteMethodResult<"setAuctionStartTime">
    > => {
      return signExecuteMethod(
        DutchAuction,
        this,
        "setAuctionStartTime",
        params
      );
    },
    baseURI: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"baseURI">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"baseURI">> => {
      return signExecuteMethod(DutchAuction, this, "baseURI", params);
    },
    setBaseURI: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"setBaseURI">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"setBaseURI">> => {
      return signExecuteMethod(DutchAuction, this, "setBaseURI", params);
    },
    withdrawMoney: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"withdrawMoney">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"withdrawMoney">> => {
      return signExecuteMethod(DutchAuction, this, "withdrawMoney", params);
    },
    mint: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"mint">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"mint">> => {
      return signExecuteMethod(DutchAuction, this, "mint", params);
    },
    onlyOwner: async (
      params: DutchAuctionTypes.SignExecuteMethodParams<"onlyOwner">
    ): Promise<DutchAuctionTypes.SignExecuteMethodResult<"onlyOwner">> => {
      return signExecuteMethod(DutchAuction, this, "onlyOwner", params);
    },
  };

  async multicall<Calls extends DutchAuctionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DutchAuctionTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends DutchAuctionTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<DutchAuctionTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | DutchAuctionTypes.MultiCallParams
      | DutchAuctionTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      DutchAuction,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
