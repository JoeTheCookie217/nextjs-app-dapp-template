/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenVestingContractJson } from "../TokenVesting.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace TokenVestingTypes {
  export type Fields = {
    beneficiary: Address;
    start: bigint;
    duration: bigint;
    balance: bigint;
  };

  export type State = ContractState<Fields>;

  export type ERC20ReleasedEvent = ContractEvent<{
    token: HexString;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    release: {
      params: CallContractParams<{ token: HexString }>;
      result: CallContractResult<null>;
    };
    vestedAmount: {
      params: CallContractParams<{ token: HexString; timestamp: bigint }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    release: {
      params: SignExecuteContractMethodParams<{ token: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    vestedAmount: {
      params: SignExecuteContractMethodParams<{
        token: HexString;
        timestamp: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { erc20Released?: Map<HexString, bigint> };
}

class Factory extends ContractFactory<
  TokenVestingInstance,
  TokenVestingTypes.Fields
> {
  encodeFields(fields: TokenVestingTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { ERC20Released: 0 };

  at(address: string): TokenVestingInstance {
    return new TokenVestingInstance(address);
  }

  tests = {
    release: async (
      params: TestContractParams<
        TokenVestingTypes.Fields,
        { token: HexString },
        TokenVestingTypes.Maps
      >
    ): Promise<TestContractResult<null, TokenVestingTypes.Maps>> => {
      return testMethod(this, "release", params, getContractByCodeHash);
    },
    vestedAmount: async (
      params: TestContractParams<
        TokenVestingTypes.Fields,
        { token: HexString; timestamp: bigint },
        TokenVestingTypes.Maps
      >
    ): Promise<TestContractResult<bigint, TokenVestingTypes.Maps>> => {
      return testMethod(this, "vestedAmount", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TokenVestingTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: TokenVestingTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const TokenVesting = new Factory(
  Contract.fromJson(
    TokenVestingContractJson,
    "",
    "2d7697e56e2d105923d3cd8067e54beb8a612ffdc9f9f2bea8df23cb8978252c",
    []
  )
);
registerContract(TokenVesting);

// Use this class to interact with the blockchain
export class TokenVestingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    erc20Released: new RalphMap<HexString, bigint>(
      TokenVesting.contract,
      this.contractId,
      "erc20Released"
    ),
  };

  async fetchState(): Promise<TokenVestingTypes.State> {
    return fetchContractState(TokenVesting, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeERC20ReleasedEvent(
    options: EventSubscribeOptions<TokenVestingTypes.ERC20ReleasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenVesting.contract,
      this,
      options,
      "ERC20Released",
      fromCount
    );
  }

  view = {
    release: async (
      params: TokenVestingTypes.CallMethodParams<"release">
    ): Promise<TokenVestingTypes.CallMethodResult<"release">> => {
      return callMethod(
        TokenVesting,
        this,
        "release",
        params,
        getContractByCodeHash
      );
    },
    vestedAmount: async (
      params: TokenVestingTypes.CallMethodParams<"vestedAmount">
    ): Promise<TokenVestingTypes.CallMethodResult<"vestedAmount">> => {
      return callMethod(
        TokenVesting,
        this,
        "vestedAmount",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    release: async (
      params: TokenVestingTypes.SignExecuteMethodParams<"release">
    ): Promise<TokenVestingTypes.SignExecuteMethodResult<"release">> => {
      return signExecuteMethod(TokenVesting, this, "release", params);
    },
    vestedAmount: async (
      params: TokenVestingTypes.SignExecuteMethodParams<"vestedAmount">
    ): Promise<TokenVestingTypes.SignExecuteMethodResult<"vestedAmount">> => {
      return signExecuteMethod(TokenVesting, this, "vestedAmount", params);
    },
  };

  async multicall<Calls extends TokenVestingTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenVestingTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TokenVestingTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TokenVestingTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TokenVestingTypes.MultiCallParams
      | TokenVestingTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TokenVesting,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
