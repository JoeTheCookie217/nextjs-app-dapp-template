/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as AirdropContractJson } from "../Airdrop.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace AirdropTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    multiTransferToken: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    multiTransferETH: {
      params: CallContractParams<{ value: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawFromFailList: {
      params: CallContractParams<{ to: Address }>;
      result: CallContractResult<null>;
    };
    getSum: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    multiTransferToken: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    multiTransferETH: {
      params: SignExecuteContractMethodParams<{ value: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawFromFailList: {
      params: SignExecuteContractMethodParams<{ to: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getSum: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { failTransferList?: Map<Address, bigint> };
}

class Factory extends ContractFactory<AirdropInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  consts = {
    ErrorCodes: {
      LengthDontMatch: BigInt("0"),
      WrongAmount: BigInt("2"),
      NotAuthorized: BigInt("3"),
    },
  };

  at(address: string): AirdropInstance {
    return new AirdropInstance(address);
  }

  tests = {
    multiTransferToken: async (
      params: Omit<
        TestContractParams<never, { tokenId: HexString }, AirdropTypes.Maps>,
        "initialFields"
      >
    ): Promise<TestContractResult<null, AirdropTypes.Maps>> => {
      return testMethod(
        this,
        "multiTransferToken",
        params,
        getContractByCodeHash
      );
    },
    multiTransferETH: async (
      params: Omit<
        TestContractParams<never, { value: bigint }, AirdropTypes.Maps>,
        "initialFields"
      >
    ): Promise<TestContractResult<null, AirdropTypes.Maps>> => {
      return testMethod(
        this,
        "multiTransferETH",
        params,
        getContractByCodeHash
      );
    },
    withdrawFromFailList: async (
      params: Omit<
        TestContractParams<never, { to: Address }, AirdropTypes.Maps>,
        "initialFields"
      >
    ): Promise<TestContractResult<null, AirdropTypes.Maps>> => {
      return testMethod(
        this,
        "withdrawFromFailList",
        params,
        getContractByCodeHash
      );
    },
    getSum: async (
      params?: Omit<
        TestContractParams<never, never, AirdropTypes.Maps>,
        "testArgs" | "initialFields"
      >
    ): Promise<TestContractResult<bigint, AirdropTypes.Maps>> => {
      return testMethod(
        this,
        "getSum",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: {},
    asset?: Asset,
    address?: string,
    maps?: AirdropTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const Airdrop = new Factory(
  Contract.fromJson(
    AirdropContractJson,
    "",
    "fe4ab3d362a29f8ab4b5ad50438d1011a76227a0a29db5704f6a7adf691f0875",
    []
  )
);
registerContract(Airdrop);

// Use this class to interact with the blockchain
export class AirdropInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    failTransferList: new RalphMap<Address, bigint>(
      Airdrop.contract,
      this.contractId,
      "failTransferList"
    ),
  };

  async fetchState(): Promise<AirdropTypes.State> {
    return fetchContractState(Airdrop, this);
  }

  view = {
    multiTransferToken: async (
      params: AirdropTypes.CallMethodParams<"multiTransferToken">
    ): Promise<AirdropTypes.CallMethodResult<"multiTransferToken">> => {
      return callMethod(
        Airdrop,
        this,
        "multiTransferToken",
        params,
        getContractByCodeHash
      );
    },
    multiTransferETH: async (
      params: AirdropTypes.CallMethodParams<"multiTransferETH">
    ): Promise<AirdropTypes.CallMethodResult<"multiTransferETH">> => {
      return callMethod(
        Airdrop,
        this,
        "multiTransferETH",
        params,
        getContractByCodeHash
      );
    },
    withdrawFromFailList: async (
      params: AirdropTypes.CallMethodParams<"withdrawFromFailList">
    ): Promise<AirdropTypes.CallMethodResult<"withdrawFromFailList">> => {
      return callMethod(
        Airdrop,
        this,
        "withdrawFromFailList",
        params,
        getContractByCodeHash
      );
    },
    getSum: async (
      params?: AirdropTypes.CallMethodParams<"getSum">
    ): Promise<AirdropTypes.CallMethodResult<"getSum">> => {
      return callMethod(
        Airdrop,
        this,
        "getSum",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    multiTransferToken: async (
      params: AirdropTypes.SignExecuteMethodParams<"multiTransferToken">
    ): Promise<AirdropTypes.SignExecuteMethodResult<"multiTransferToken">> => {
      return signExecuteMethod(Airdrop, this, "multiTransferToken", params);
    },
    multiTransferETH: async (
      params: AirdropTypes.SignExecuteMethodParams<"multiTransferETH">
    ): Promise<AirdropTypes.SignExecuteMethodResult<"multiTransferETH">> => {
      return signExecuteMethod(Airdrop, this, "multiTransferETH", params);
    },
    withdrawFromFailList: async (
      params: AirdropTypes.SignExecuteMethodParams<"withdrawFromFailList">
    ): Promise<
      AirdropTypes.SignExecuteMethodResult<"withdrawFromFailList">
    > => {
      return signExecuteMethod(Airdrop, this, "withdrawFromFailList", params);
    },
    getSum: async (
      params: AirdropTypes.SignExecuteMethodParams<"getSum">
    ): Promise<AirdropTypes.SignExecuteMethodResult<"getSum">> => {
      return signExecuteMethod(Airdrop, this, "getSum", params);
    },
  };

  async multicall<Calls extends AirdropTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AirdropTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends AirdropTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<AirdropTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends AirdropTypes.MultiCallParams | AirdropTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Airdrop, this, callss, getContractByCodeHash);
  }
}
